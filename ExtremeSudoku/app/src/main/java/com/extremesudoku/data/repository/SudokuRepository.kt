package com.extremesudoku.data.repository

import com.extremesudoku.data.TestData
import com.extremesudoku.data.local.dao.GameStateDao
import com.extremesudoku.data.local.dao.SudokuDao
import com.extremesudoku.data.local.entities.toEntity
import com.extremesudoku.data.local.entities.toDomain
import com.extremesudoku.data.models.GameState
import com.extremesudoku.data.models.Sudoku
import com.extremesudoku.data.remote.FirebaseDataSource
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class SudokuRepository @Inject constructor(
    private val sudokuDao: SudokuDao,
    private val gameStateDao: GameStateDao,
    private val firebaseDataSource: FirebaseDataSource,
    private val auth: FirebaseAuth
) {
    private val currentUserId: String
        get() = auth.currentUser?.uid ?: "guest"
    // Sudoku getirme (√∂nce local, sonra remote)
    suspend fun getSudoku(id: String): Result<Sudoku> {
        val localSudoku = sudokuDao.getSudokuById(id)
        if (localSudoku != null) {
            return Result.success(localSudoku.toDomain())
        }
        
        return firebaseDataSource.getSudokuById(id).also { result ->
            result.getOrNull()?.let { sudoku ->
                sudokuDao.insertSudoku(sudoku.toEntity())
            }
        }
    }
    
    suspend fun getRandomSudoku(difficulty: String? = null): Result<Sudoku> {
        android.util.Log.d("SudokuRepository", "üéØ getRandomSudoku √ßaƒürƒ±ldƒ± - ƒ∞stenen difficulty: $difficulty")
        
        // Difficulty'yi normalize et (lowercase)
        val normalizedDifficulty = difficulty?.lowercase()
        android.util.Log.d("SudokuRepository", "‚úÖ Normalize edildi: $normalizedDifficulty")
        
        // √ñnce local database'den oynamadƒ±ƒüƒ± sudoku'larƒ± bul
        val localSudoku = if (normalizedDifficulty != null) {
            val puzzles = sudokuDao.getUnplayedSudokuByDifficulty(normalizedDifficulty)
            android.util.Log.d("SudokuRepository", "üìä Local'de oynamadƒ±k $normalizedDifficulty puzzle sayƒ±sƒ±: ${puzzles.size}")
            puzzles.randomOrNull()
        } else {
            val puzzle = sudokuDao.getRandomUnplayedSudoku()
            android.util.Log.d("SudokuRepository", "üìä Local'de oynamadƒ±k rastgele puzzle: ${puzzle != null}")
            puzzle
        }
        
        if (localSudoku != null) {
            android.util.Log.d("SudokuRepository", "‚úÖ Local'den puzzle d√∂nd√ºr√ºl√ºyor - ID: ${localSudoku.id}, Difficulty: ${localSudoku.difficulty}")
            return Result.success(localSudoku.toDomain())
        }
        
        android.util.Log.w("SudokuRepository", "‚ö†Ô∏è Local'de puzzle bulunamadƒ±, Firebase kontrol√ºne ge√ßiliyor...")
        
        // Local'de oynamadƒ±k sudoku kalmadƒ±ysa:
        // 1. Database'de hi√ß sudoku yok mu kontrol et
        val totalCount = sudokuDao.getSudokuCount()
        android.util.Log.d("SudokuRepository", "üìä Database'deki toplam puzzle sayƒ±sƒ±: $totalCount")
        
        if (totalCount == 0) {
            android.util.Log.d("SudokuRepository", "üîÑ ƒ∞lk a√ßƒ±lƒ±≈ü - Firebase'den puzzle y√ºklenecek")
            // ƒ∞lk a√ßƒ±lƒ±≈ü - Firebase'den y√ºkle
            return loadInitialSudokusFromFirebase(normalizedDifficulty)
        }
        
        // 2. Belirli zorlukta oynamadƒ±k puzzle kalmadƒ±ysa Firebase'den YENƒ∞ puzzle'lar √ßek
        if (normalizedDifficulty != null) {
            android.util.Log.d("SudokuRepository", "üîç $normalizedDifficulty puzzle'ƒ± t√ºkendi, Firebase'den YENƒ∞ puzzle'lar y√ºkleniyor...")
            
            // Firebase'den 50 adet yeni puzzle √ßek
            val firebaseResult = firebaseDataSource.getSudokusByDifficulty(normalizedDifficulty, limit = 50)
            firebaseResult.getOrNull()?.let { newPuzzles ->
                android.util.Log.d("SudokuRepository", "‚úÖ Firebase'den ${newPuzzles.size} adet YENƒ∞ puzzle alƒ±ndƒ±")
                
                // Yeni puzzle'larƒ± database'e kaydet
                newPuzzles.forEach { sudoku ->
                    sudokuDao.insertSudoku(sudoku.toEntity())
                }
                
                // Yeni puzzle'lardan birini random se√ß ve d√∂nd√ºr
                val selectedPuzzle = newPuzzles.random()
                android.util.Log.d("SudokuRepository", "‚úÖ Se√ßilen puzzle - ID: ${selectedPuzzle.id}, Difficulty: ${selectedPuzzle.difficulty}")
                return Result.success(selectedPuzzle)
            }
            
            // Firebase'den de yeni puzzle gelemezse, farklƒ± zorluktan dene
            android.util.Log.d("SudokuRepository", "üîç Firebase'den puzzle gelmedi, alternatif aranƒ±yor...")
            val allUnplayed = sudokuDao.getRandomUnplayedSudoku()
            if (allUnplayed != null) {
                android.util.Log.w("SudokuRepository", "‚ö†Ô∏è FARKLI ZORLUKTA puzzle d√∂nd√ºr√ºl√ºyor! ƒ∞stenilen: $normalizedDifficulty, D√∂nd√ºr√ºlen: ${allUnplayed.difficulty}")
                return Result.success(allUnplayed.toDomain())
            }
            
            android.util.Log.d("SudokuRepository", "üîç Oynanan puzzle'lardan aranƒ±yor...")
            // Son √ßare: Oynanan puzzlelardan d√∂nd√ºr
            val anyPuzzle = sudokuDao.getSudokuByDifficulty(normalizedDifficulty).randomOrNull()
            if (anyPuzzle != null) {
                android.util.Log.d("SudokuRepository", "‚úÖ Oynanan puzzle'dan d√∂nd√ºr√ºl√ºyor - ID: ${anyPuzzle.id}, Difficulty: ${anyPuzzle.difficulty}")
                return Result.success(anyPuzzle.toDomain())
            }
            
            android.util.Log.e("SudokuRepository", "‚ùå $normalizedDifficulty i√ßin hi√ßbir puzzle bulunamadƒ±!")
            return Result.failure(Exception("No puzzles available for difficulty: $normalizedDifficulty"))
        }
        
        // Zorluk belirtilmemi≈üse, Firebase'den random 50 puzzle √ßek
        android.util.Log.d("SudokuRepository", "üî• Firebase'den rastgele puzzle'lar isteniyor...")
        val firebaseResult = firebaseDataSource.getSudokuBatch(limit = 50)
        firebaseResult.getOrNull()?.let { newPuzzles ->
            android.util.Log.d("SudokuRepository", "‚úÖ Firebase'den ${newPuzzles.size} adet puzzle alƒ±ndƒ±")
            
            // Puzzle'larƒ± database'e kaydet
            newPuzzles.forEach { sudoku ->
                sudokuDao.insertSudoku(sudoku.toEntity())
            }
            
            // Random birini se√ß ve d√∂nd√ºr
            val selectedPuzzle = newPuzzles.random()
            android.util.Log.d("SudokuRepository", "‚úÖ Se√ßilen puzzle - ID: ${selectedPuzzle.id}, Difficulty: ${selectedPuzzle.difficulty}")
            return Result.success(selectedPuzzle)
        }
        
        // Hi√ßbir ≈üey √ßalƒ±≈ümazsa hata d√∂nd√ºr
        android.util.Log.e("SudokuRepository", "‚ùå Firebase'den puzzle alƒ±namadƒ±!")
        return Result.failure(Exception("Could not load puzzles from Firebase"))
    }
    
    /**
     * ƒ∞lk a√ßƒ±lƒ±≈üta Firebase'den sudokularƒ± y√ºkle
     * 200K sudoku varsa, her zorluktan random √ßekip database'e kaydet
     * @param preferredDifficulty ƒ∞stenilen zorluk varsa √∂nce onu y√ºkle
     */
    private suspend fun loadInitialSudokusFromFirebase(preferredDifficulty: String? = null): Result<Sudoku> {
        android.util.Log.d("SudokuRepository", "üöÄ loadInitialSudokusFromFirebase ba≈üladƒ± - Preferred: $preferredDifficulty")
        return try {
            val difficulties = listOf("easy", "medium", "hard", "expert")
            
            // √ñnce istenen difficulty'den y√ºkle (varsa)
            if (preferredDifficulty != null && preferredDifficulty in difficulties) {
                android.util.Log.d("SudokuRepository", "üì• Firebase'den $preferredDifficulty puzzle'lar y√ºkleniyor (limit: 50)...")
                val result = firebaseDataSource.getSudokusByDifficulty(preferredDifficulty, limit = 50)
                result.getOrNull()?.let { puzzles ->
                    android.util.Log.d("SudokuRepository", "‚úÖ Firebase'den ${puzzles.size} adet $preferredDifficulty puzzle alƒ±ndƒ±")
                    if (puzzles.isNotEmpty()) {
                        puzzles.forEach { sudoku ->
                            android.util.Log.v("SudokuRepository", "üíæ Kaydediliyor: ID=${sudoku.id}, Diff=${sudoku.difficulty}, Puzzle=${sudoku.puzzle.take(20)}...")
                            sudokuDao.insertSudoku(sudoku.toEntity())
                        }
                        val randomPuzzle = puzzles.random()
                        android.util.Log.d("SudokuRepository", "‚úÖ D√∂nd√ºr√ºlen puzzle: ID=${randomPuzzle.id}, Difficulty=${randomPuzzle.difficulty}")
                        // ƒ∞stenen difficulty'den birini d√∂nd√ºr
                        return Result.success(randomPuzzle)
                    } else {
                        android.util.Log.w("SudokuRepository", "‚ö†Ô∏è Firebase'den $preferredDifficulty puzzle gelmedi!")
                    }
                }
            }
            
            android.util.Log.d("SudokuRepository", "üì• Diƒüer zorluklar da y√ºkleniyor...")
            // Diƒüer zorluklarƒ± da background'da y√ºkle (her birinden 50'≈üer)
            difficulties.filter { it != preferredDifficulty }.forEach { difficulty ->
                try {
                    android.util.Log.d("SudokuRepository", "üì• $difficulty puzzle'lar y√ºkleniyor...")
                    val result = firebaseDataSource.getSudokusByDifficulty(difficulty, limit = 50)
                    result.getOrNull()?.let { puzzles ->
                        android.util.Log.d("SudokuRepository", "‚úÖ ${puzzles.size} adet $difficulty puzzle alƒ±ndƒ±")
                        puzzles.forEach { sudoku ->
                            sudokuDao.insertSudoku(sudoku.toEntity())
                        }
                    }
                } catch (e: Exception) {
                    android.util.Log.e("SudokuRepository", "‚ùå $difficulty y√ºklenemedi: ${e.message}", e)
                    // Tek bir zorluk ba≈üarƒ±sƒ±z olursa devam et
                }
            }
            
            android.util.Log.d("SudokuRepository", "üî• Rastgele puzzle denenecek...")
            // Eƒüer hi√ßbir puzzle y√ºklenemediyse, random √ßek
            val randomResult = firebaseDataSource.getRandomSudoku()
            randomResult.getOrNull()?.let { sudoku ->
                android.util.Log.d("SudokuRepository", "‚úÖ Rastgele puzzle alƒ±ndƒ± - ID: ${sudoku.id}, Difficulty: ${sudoku.difficulty}")
                sudokuDao.insertSudoku(sudoku.toEntity())
                return Result.success(sudoku)
            }
            
            android.util.Log.e("SudokuRepository", "‚ùå Firebase'den hi√ßbir puzzle y√ºklenemedi!")
            // Son √ßare olarak hata d√∂nd√ºr
            Result.failure(Exception("Could not load any puzzles from Firebase"))
        } catch (e: Exception) {
            android.util.Log.e("SudokuRepository", "üí• loadInitialSudokusFromFirebase exception: ${e.message}", e)
            Result.failure(e)
        }
    }
    
    /**
     * Belirli bir zorluktan daha fazla puzzle y√ºkle
     */
    private suspend fun loadMoreSudokusFromFirebase(difficulty: String) {
        try {
            val result = firebaseDataSource.getSudokusByDifficulty(difficulty, limit = 50)
            result.getOrNull()?.forEach { sudoku ->
                sudokuDao.insertSudoku(sudoku.toEntity())
            }
        } catch (e: Exception) {
            // Hata durumunda sessizce devam et - kritik deƒüil
        }
    }
    
    // Game state operasyonlarƒ±
    fun getActiveGames(): Flow<List<GameState>> {
        return gameStateDao.getActiveGames(currentUserId).map { entities ->
            entities.map { it.toDomain() }
        }
    }
    
    fun getCompletedGames(limit: Int = 10): Flow<List<GameState>> {
        return gameStateDao.getCompletedGames(currentUserId, limit).map { entities ->
            entities.map { it.toDomain() }
        }
    }
    
    suspend fun saveGameState(gameState: GameState) {
        gameStateDao.saveGameState(gameState.toEntity())
        // Background'da Firebase'e sync et
        firebaseDataSource.syncGameState(gameState)
    }
    
    suspend fun getGameState(gameId: String): GameState? {
        return gameStateDao.getGameState(gameId)?.toDomain()
    }
    
    suspend fun deleteGameState(gameId: String) {
        gameStateDao.deleteGameById(gameId)
    }
    
    suspend fun abandonGame(gameId: String) {
        // Oyunu "abandoned" olarak i≈üaretle - bir daha denk gelmesin
        val gameState = gameStateDao.getGameState(gameId)
        gameState?.let {
            val updatedState = it.copy(isAbandoned = true, lastPlayedAt = System.currentTimeMillis())
            gameStateDao.saveGameState(updatedState)
        }
    }
    
    // Sudoku cache'i doldurma - Background'da √ßalƒ±≈üƒ±r
    suspend fun cacheSudokus(count: Int = 200) {
        val currentCount = sudokuDao.getSudokuCount()
        if (currentCount >= count) return
        
        // Her zorluktan e≈üit sayƒ±da puzzle √ßek
        val difficulties = listOf("easy", "medium", "hard", "expert")
        val perDifficulty = count / difficulties.size
        
        try {
            difficulties.forEach { difficulty ->
                val existingCount = sudokuDao.getSudokuCountByDifficulty(difficulty)
                if (existingCount < perDifficulty) {
                    val needed = perDifficulty - existingCount
                    val result = firebaseDataSource.getSudokusByDifficulty(difficulty, limit = needed)
                    result.getOrNull()?.forEach { sudoku ->
                        sudokuDao.insertSudoku(sudoku.toEntity())
                    }
                }
            }
        } catch (e: Exception) {
            // Hata durumunda sessizce devam et - kritik deƒüil
        }
    }
    
    suspend fun getSudokuCount(): Int {
        return sudokuDao.getSudokuCount()
    }
}
